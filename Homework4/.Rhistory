data.3<-read.table("diabetes.txt",header=T)
(covarianza <- cov(data.3))
x <- data.3[,4:6]
y <- data.3[,2:3]
data.3<-read.table("diabetes.txt",header=T)
(covarianza <- cov(data.3))
x.3 <- data.3[,4:6]
y.3 <- data.3[,2:3]
(cca <- stats::cancor(x, y))
cov.3<-matrix(c(1106.0, 396.7 108.4, .787, 26.230),c(396.7, 2382.0, 1143.0, -.214, -23.96))
cov.3<-matrix(c(1106.0, 396.7, 108.4, .787, 26.230),c(396.7, 2382.0, 1143.0, -.214, -23.96))
cov.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230),c(396.7, 2382.0, 1143.0, -.214, -23.96))
View(cov.3)
cov.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230),c(396.7, 2382.0, 1143.0, -.214, -23.96), c(.787, .-214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56))
cov.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230),c(396.7, 2382.0, 1143.0, -.214, -23.96), c(.787, -.214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56))
View(cov.3)
R.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230),c(396.7, 2382.0, 1143.0, -.214, -23.96), c(.787, -.214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56))
R11.3<-R.3[1:3,1:3]
R12.3<-R.3[4:5,4:5]
View(R.3)
R.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230),c(396.7, 2382.0, 1143.0, -.214, -23.96),c(108.4,1143.0,2136.0,2.189,-20.84) c(.787, -.214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56) )
R.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230), c(396.7, 2382.0, 1143.0, -.214, -23.96),c(108.4,1143.0,2136.0,2.189,-20.84), c(.787, -.214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56) )
R11.3<-R.3[1:3,1:3]
R12.3<-R.3[4:5,4:5]
View(spearman.3)
set.seed(20200420) #created at date
# assigning number of excercises
(people_3quest <- sample(x = c("Roman","Pablo","Sof"),replace = F, size = 2)) #people with 3 questions, by alphabetic order
# assinging excersises
number_ex <- 1:10 #excercises
cat("\nEjercicios Roman: ")
(ex_luis <- sample(x = number_ex, replace = F, size = 4))
number_ex <- number_ex[! number_ex %in% ex_luis] #removing questions
cat("\nEjercicios Pablo: ")
(ex_roman <- sample(x = number_ex, replace = F, size = 3))
number_ex <- number_ex[! number_ex %in% ex_roman] #removing questions
cat("\nEjercicios Sof: ")
(ex_sof <- number_ex)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('ccaPP')
lapply(libs, instalar)
R.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230), c(396.7, 2382.0, 1143.0, -.214, -23.96),c(108.4,1143.0,2136.0,2.189,-20.84), c(.787, -.214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56) )
R11.3<-R.3[1:3,1:3]
R12.3<-R.3[4:5,4:5]
View(R.3)
R.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230), c(396.7, 2382.0, 1143.0, -.214, -23.96),c(108.4,1143.0,2136.0,2.189,-20.84), c(.787, -.214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56) )
R11.3<-R.3[4:5,4:5];R22.3<-R.3[1:3,1:3];R12.3<-R.3[4:5,1:3];R21<-R.3[1:3,4:5]
R.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230), c(396.7, 2382.0, 1143.0, -.214, -23.96),c(108.4,1143.0,2136.0,2.189,-20.84), c(.787, -.214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56) )
R11.3<-R.3[4:5,4:5];R22.3<-R.3[1:3,1:3];R12.3<-R.3[4:5,1:3];R21.3<-t(R12.3)
R.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230), c(396.7, 2382.0, 1143.0, -.214, -23.96),c(108.4,1143.0,2136.0,2.189,-20.84), c(.787, -.214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56) )
R11.3<-R.3[4:5,4:5];R22.3<-R.3[1:3,1:3];R12.3<-R.3[4:5,1:3];R21.3<-t(R12.3)
A.3 <- solve(R11.3) %*% R12.3 %*% solve(R22.3) %*% R21.3
sA.3 <- eigen(A.3);sA.3
R.3[4:5,1:5]
sqrt(0.26764579)
# CÃ¡lculo de la matriz B
B.3 <- solve(R22.3) %*% R21.3 %*% solve(R11.3) %*% R12.3
sB.3 <- eigen(B.3);sB.3
0.26764579/(0.26764579+0.01575231)
sestructura.3 <- as.matrix(W[,4:5]) %*% sA$vectors[,1]
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('CANCORR')
lapply(libs, instalar)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('rrcov')
lapply(libs, instalar)
data(hemophilia)
View(hemophilia)
data.9<-read.table("hemofilia", header = F)
data.9<-read.table("hemofilia.txt", header = F)
View(data.9)
(mcd <- CovMcd(hemophilia[,1:2]))
col <- ifelse(hemophilia$gr == "carrier", 2, 3) ## define clours for the groups
plot(mcd, which="tolEllipsePlot", class=TRUE, col=col)
View(data.9)
data(hemophilia)
View(hemophilia)
View(data.9)
data.9<-data("hemophilia")
data("hemophilia")
set.seed(20200420) #created at date
# assigning number of excercises
(people_3quest <- sample(x = c("Roman","Pablo","Sof"),replace = F, size = 2)) #people with 3 questions, by alphabetic order
# assinging excersises
number_ex <- 1:10 #excercises
cat("\nEjercicios Roman: ")
(ex_luis <- sample(x = number_ex, replace = F, size = 4))
number_ex <- number_ex[! number_ex %in% ex_luis] #removing questions
cat("\nEjercicios Pablo: ")
(ex_roman <- sample(x = number_ex, replace = F, size = 3))
number_ex <- number_ex[! number_ex %in% ex_roman] #removing questions
cat("\nEjercicios Sof: ")
(ex_sof <- number_ex)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('rrcov')
lapply(libs, instalar)
R.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230), c(396.7, 2382.0, 1143.0, -.214, -23.96),c(108.4,1143.0,2136.0,2.189,-20.84), c(.787, -.214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56) )
R11.3<-R.3[4:5,4:5];R22.3<-R.3[1:3,1:3];R12.3<-R.3[4:5,1:3];R21.3<-t(R12.3)
A.3 <- solve(R11.3) %*% R12.3 %*% solve(R22.3) %*% R21.3
sA.3 <- eigen(A.3);sA.3
# CÃ¡lculo de la matriz B
B.3 <- solve(R22.3) %*% R21.3 %*% solve(R11.3) %*% R12.3
sB.3 <- eigen(B.3);sB.3
data("hemophilia")
(mcd <- CovMcd(hemophilia[,1:2]))
col <- ifelse(hemophilia$gr == "carrier", 2, 3) ## define clours for the groups
plot(mcd, which="tolEllipsePlot", class=TRUE, col=col)
data("hemophilia")
plot(hemophilia)
View(hemophilia)
data("hemophilia")
plot(hemophilia$AHFactivity)
data("hemophilia")
plot(hemophilia$AHFactivity)
plot(hemophilia$AHFantigen)
ad.test(hemophilia)
ad.test(hemophilia$AHFactivity)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c('rrcov', 'nortest')
lapply(libs, instalar)
ad.test(hemophilia$AHFactivity)
ad.test(hemophilia$AHFantigen)
size.9 <- floor(0.75 * nrow(hemophilia))
train_ind.9 <- sample(nrow(hemophilia), size = size.9)
train_df.9 <- as.data.frame(hemophilia[train_ind.9, ])
test_d.9f <- as.data.frame(hemophilia[-train_ind.9, ])
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c( 'HistData', 'rrcov', 'nortest', 'corrplot', 'CCA',
'candisc','car','dummies','corrplot','knitr','ggplot2')
lapply(libs, instalar)
set.seed(20200420) #created at date
# assigning number of excercises
(people_3quest <- sample(x = c("Roman","Pablo","Sof"),replace = F, size = 2)) #people with 3 questions, by alphabetic order
# assinging excersises
number_ex <- 1:10 #excercises
cat("\nEjercicios Roman: ")
(ex_luis <- sample(x = number_ex, replace = F, size = 4))
number_ex <- number_ex[! number_ex %in% ex_luis] #removing questions
cat("\nEjercicios Pablo: ")
(ex_roman <- sample(x = number_ex, replace = F, size = 3))
number_ex <- number_ex[! number_ex %in% ex_roman] #removing questions
cat("\nEjercicios Sof: ")
(ex_sof <- number_ex)
set.seed(20200420) #created at date
# assigning number of excercises
(people_3quest <- sample(x = c("Roman","Pablo","Sof"),replace = F, size = 2)) #people with 3 questions, by alphabetic order
# assinging excersises
number_ex <- 1:10 #excercises
cat("\nEjercicios Roman: ")
(ex_luis <- sample(x = number_ex, replace = F, size = 4))
number_ex <- number_ex[! number_ex %in% ex_luis] #removing questions
cat("\nEjercicios Pablo: ")
(ex_roman <- sample(x = number_ex, replace = F, size = 3))
number_ex <- number_ex[! number_ex %in% ex_roman] #removing questions
cat("\nEjercicios Sof: ")
(ex_sof <- number_ex)
set.seed(20200420) #created at date
# assigning number of excercises
(people_3quest <- sample(x = c("Roman","Pablo","Sof"),replace = F, size = 2)) #people with 3 questions, by alphabetic order
# assinging excersises
number_ex <- 1:10 #excercises
cat("\nEjercicios Roman: ")
(ex_luis <- sample(x = number_ex, replace = F, size = 4))
number_ex <- number_ex[! number_ex %in% ex_luis] #removing questions
cat("\nEjercicios Pablo: ")
(ex_roman <- sample(x = number_ex, replace = F, size = 3))
number_ex <- number_ex[! number_ex %in% ex_roman] #removing questions
cat("\nEjercicios Sof: ")
(ex_sof <- number_ex)
set.seed(20200420) #created at date
# assigning number of excercises
(people_3quest <- sample(x = c("Roman","Pablo","Sof"),replace = F, size = 2)) #people with 3 questions, by alphabetic order
# assinging excersises
number_ex <- 1:10 #excercises
cat("\nEjercicios Roman: ")
(ex_luis <- sample(x = number_ex, replace = F, size = 4))
number_ex <- number_ex[! number_ex %in% ex_luis] #removing questions
cat("\nEjercicios Pablo: ")
(ex_roman <- sample(x = number_ex, replace = F, size = 3))
number_ex <- number_ex[! number_ex %in% ex_roman] #removing questions
cat("\nEjercicios Sof: ")
(ex_sof <- number_ex)
#Instalar las librerias necesarias y cargarlas
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)){
install.packages(as.character(paquete),
dependecies = TRUE,
repos = "http://cran.us.r-project.org")
library(paquete,
character.only = TRUE,
quietly = TRUE,
warn.conflicts = FALSE)
}
}
libs <- c( 'HistData', 'rrcov', 'nortest', 'corrplot', 'CCA',
'candisc','car','dummies','corrplot','knitr','ggplot2')
lapply(libs, instalar)
#Declaramos la matriz de correlaciÃ³n.
R2 = matrix(c(1.0, .615, -.111, -.266,
.615, 1.0, -.195, -.085,
-.111, -.195 ,1.0, -.269,
-.266, -.085,-.269, 1.0),
ncol = 4)
R11.2 = R2[1:2,1:2]
R12.2 = R2[1:2,3:4]
R21.2 = R2[3:4,1:2]
R22.2 = R2[3:4,3:4]
#Opcion 1. Vista en clase
#CÃ¡lculo de A (la matriz chica para estructura)
A <- solve(R11.2) %*% R12.2 %*% solve(R22.2) %*% R21.2
#CÃ¡lculo de B
B <- solve(R22.2) %*% R21.2 %*% solve(R11.2) %*% R12.2
sA <- eigen(A);
sB <- eigen(B);
print("Valores canonicos dados por A:")
round(sqrt(sA$values),2)
print("Valores canonicos dados por B:")
round(sqrt(sB$values),2)
print("DirecciÃ³n Canonica a :")
round(sA$vectors[,1],3)
print("DirecciÃ³n Canonica b :")
round(sB$vectors[,1],3)
#Opcion 2. H de Johnsin & Wichern
Sx.eig <- eigen(R11.2)
Sx.sqrt <- Sx.eig$vectors %*% diag(1/sqrt(Sx.eig$values)) %*% solve(Sx.eig$vectors)
Sy.eig <- eigen(R22.2)
Sy.sqrt <- Sy.eig$vectors %*% diag(1/sqrt(Sy.eig$values)) %*% solve(Sy.eig$vectors)
#CÃ¡lculo de A
HA <- Sy.sqrt %*% R21.2 %*%  solve(R11.2) %*% R12.2 %*% Sy.sqrt
#CÃ¡lculo de B
HB <- Sx.sqrt %*% R12.2 %*%  solve(R22.2) %*% R21.2 %*% Sx.sqrt
sHA <- eigen(HA);
sHB <- eigen(HB);
a1 = Sx.sqrt %*% sHA$vectors[,1]
b1 = Sy.sqrt %*% sHB$vectors[,1]
print("Valores canonicos dados por A:")
round(sqrt(sHA$values),2)
print("DirecciÃ³n Canonica a :")
a1
print("Valores canonicos dados por B:")
round(sqrt(sHB$values),2)
print("DirecciÃ³n Canonica b :")
b1
#Por alguna razon los resultados son muy extraÃ±os, creo que deberian normalizarse y por lo mismo nos quedaremos con los procedimientos vistos en clase.
R.3<-cbind(c(1106.0, 396.7, 108.4, .787, 26.230), c(396.7, 2382.0, 1143.0, -.214, -23.96),c(108.4,1143.0,2136.0,2.189,-20.84), c(.787, -.214, 2.189, .016, .216), c(26.23, -23.960, -20.84, .216, 70.56) )
R11.3<-R.3[4:5,4:5];R22.3<-R.3[1:3,1:3];R12.3<-R.3[4:5,1:3];R21.3<-t(R12.3)
A.3 <- solve(R11.3) %*% R12.3 %*% solve(R22.3) %*% R21.3
sA.3 <- eigen(A.3);sA.3
# CÃ¡lculo de la matriz B
B.3 <- solve(R22.3) %*% R21.3 %*% solve(R11.3) %*% R12.3
sB.3 <- eigen(B.3);sB.3
#table
df_r <- read.csv('E9-6.csv')
R <- as.matrix(df_r)
#corrplot
corrplot(R)
#subset
l_subset1 <- c(1,5,2)
l_subset2 <- c(7,9,3)
#sets
R1 <- R[l_subset1,l_subset1]
R2 <- R[l_subset2,l_subset2]
R12 <- R[l_subset1, l_subset2]
R21 <- R[l_subset2, l_subset1]
#cors
A <- solve(R1) %*% R21 %*% solve(R2) %*% R12
B <- solve(R2) %*% R12 %*% solve(R1) %*% R21
sA <- eigen(A)
sB <- eigen(B)
#cca
#corrs
cat("Correlaciones\n")
sqrt(sA$values)
cat("U1\n")
sA$vectors[,1]
cat("V1\n")
sB$vectors[,1]
#descargar BDD
temp <- tempfile()
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank.zip", temp)
W <- read.csv(unz(temp, "bank-full.csv"), header=T, sep=";")
#modules
to_date <- function(day, month){
day <- as.numeric(as.character(day))
month <- as.numeric(as.character(month))
#month has 30 days
days <- (month - 1) * 30 + day
return(days)
}
#main
df_main <- W
#recode job
recods_job <- "c('admin.','management','entrepreneur')='high'; c('student','self-employed','retired')='medium'; else='low'"
df_main$job <- recode(df_main$job, recods_job)
#recode marital
recods_marital <- "c('divorced','single')='not_married'"
df_main$marital <-  recode(df_main$marital, recods_marital)
#recode education
recods_ed <- "'tertiary'='grad';else='non_grad'"
df_main$education <-recode(df_main$education, recods_ed)
#recode contact
recode_cont <- "c('cellular','telephone')='1';else='0'"
df_main$contact <- recode(df_main$contact, recode_cont)
#date transformation
recode_month <- "'apr'='4'; 'aug'='8'; 'dec'='12'; 'feb'='2'; 'jan'='1'; 'jul'='7'; 'jun'='6'; 'mar'='3'; 'may'='5'; 'nov'='11'; 'oct'='10'; 'sep'='9'"
df_main$month <- recode(df_main$month, recode_month)
df_main$days <- mapply(FUN = to_date, df_main$day, df_main$month)
#poutcome
df_main$poutcome <- ifelse( df_main$poutcome == 'success',1,0)
#create dumms
create_dums <- function(df, cols){
#create dumms
for (categ in cols){
df <- cbind(df, dummy(df[,categ], sep = '_'))
}
#delete old cols
df[,cols] <- NULL
#delete one dummie column to avoid colineality
df[,'df1_low'] <- NULL
df[,'df1_not_married'] <- NULL
df[,'df1_non_grad'] <- NULL
return(df)
}
#### MAIN
#personal atributes
pers_set <- c('age','job','marital','education')
past_campgn_set <- c('contact','days','duration','poutcome')
#select variables
df1 <- df_main[,cbind(pers_set, past_campgn_set)]
#create dummies
#dummies for personal atributes
dumm_cols <- c('job','marital','education')
df1 <- create_dums(df1, dumm_cols)
#cols to numeric
df1[,'contact'] <- as.numeric(as.character(df1[,'contact']))
R1 <- cor(df1, method = 'pearson')
corrplot(R1, method = 'color', type = 'upper')
corrplot(R1, method = 'number', type = 'upper')
# set sets
fa_lis <- c('age','df1_high','df1_medium','df1_married','df1_grad')
fa_matrix <- df1[,fa_lis]
pc_lis <- c('contact','days','duration','poutcome')
pc_matrix <- df1[,pc_lis]
#CCA analisis
cca1 <- stats::cancor(x = fa_matrix, y = pc_matrix, xcenter = FALSE, ycenter = FALSE)
cca2 <- cc(fa_matrix, pc_matrix)
# cca3
S <- cov(df1)
Sxx <- S[1:5,1:5]
Syy <- S[6:9,6:9]
Sxy <- S[1:5,6:9]
Syx <- t(Sxy)
#  A and B
A <- solve(Syy) %*%  Syx %*% solve(Sxx) %*% Sxy
sA <- eigen(A)
sqrt(sA$values)
B <- solve(Sxx) %*% Sxy %*% solve(Syy) %*% Syx
sB <- eigen(B)
corCCA3 <- sqrt(sB$values)
cca1$cor
cca2$cor
corCCA3
# canonical variables
U1 <- as.matrix(fa_matrix)  %*% as.matrix(cca1$xcoef)
V1  <- as.matrix(pc_matrix) %*% as.matrix(cca1$ycoef)
U2 <- as.matrix(fa_matrix)  %*% as.matrix(cca2$xcoef)
V2  <- as.matrix(pc_matrix) %*% as.matrix(cca2$ycoef)
U3 <- as.matrix(fa_matrix) %*% sB$vectors
V3 <- as.matrix(pc_matrix) %*% sA$vectors
# plot correlation between U and V
R1 <- cor(U1,V1)
R2 <- cor(U2,V2)
R3 <- cor(U3,V3)
corrplot(R1,  method = 'number', col = rainbow(1000), title = 'CCA1')
corrplot(R2,  method = 'number', col = rainbow(1000), title = 'CCA2')
corrplot(R3,  method = 'number', col = rainbow(1000), title = 'CCA3')
corrplot(cor(U2,fa_matrix),  method = 'number', col = topo.colors(100), title = 'CCA1')
corrplot( cor(V2, pc_matrix),  method = 'number', col = topo.colors(100), title = 'CCA2')
z1 <- U2[,1]
z2 <- U2[,2]
w1 <- V2[,1]
w2 <- V2[,2]
data1 <- data.frame(z1, w1)
#scores
ggplot(data = data1, mapping = aes(x = z1, y = w1)) + geom_point() + geom_smooth(method = 'lm')
#relationship with previous campaign
plot(x = z1, y = w1, col = df1[,'poutcome'] + 1)
data2 <- data.frame(z2, w2)
#scores
ggplot(data = data2, mapping = aes(x = z2, y = w2)) + geom_point() + geom_smooth(method = 'lm')
#scores with previous outcome
plot(x = z2, y = w2, col = df1[,'poutcome'] + 1)
# set of variables
bank_set <- c('default','balance','housing','loan')
past_campgn_set <- c('contact','days','duration','poutcome')
#select variables
df2 <- df_main[,cbind(bank_set, past_campgn_set)]
#dummies for bank info
df2[,'default'] <- ifelse( df2[,'default'] == 'yes', 1, 0)
df2[,'housing'] <- ifelse( df2[,'housing'] == 'yes', 1, 0)
df2[,'loan'] <- ifelse( df2[,'loan'] == 'yes', 1, 0)
#cols to numeric
df2[,'contact'] <- as.numeric(as.character(df2[,'contact']))
R2 <- cor(df2)
corrplot(R2, method = 'color', type = 'upper')
corrplot(R2, method = 'number')
# set sets
bank_lis <- c("default",  "balance",  "housing",  "loan")
bank_matrix <- df2[,bank_lis]
pc_lis <- c('contact','days','duration','poutcome')
pc_matrix <- df2[,pc_lis]
#CCA analisis
cca2 <- stats::cancor(x = bank_matrix, y = pc_matrix, xcenter = FALSE, ycenter = FALSE)
cca2
z1 <- as.matrix(bank_matrix) %*% cca2$xcoef[,1]
w1 <- as.matrix(pc_matrix) %*% cca2$ycoef[,1]
data1 <- data.frame(z1, w1)
#plot
#scores
ggplot(data = data1, mapping = aes(x = z1, y = w1)) + geom_point() + geom_smooth(method = 'lm')
#relationship with previous campaign
plot(x = z1, y = w1, col = df2[,'poutcome'] + 1)
z2 <- as.matrix(bank_matrix) %*% cca2$xcoef[,2]
w2 <- as.matrix(pc_matrix) %*% cca2$ycoef[,2]
data1 <- data.frame(z2, w2)
#plot
#scores
ggplot(data = data1, mapping = aes(x = z2, y = w2)) + geom_point() + geom_smooth(method = 'lm')
#relationship with previous campaign
plot(x = z2, y = w2, col = df2[,'poutcome'] + 1)
data.6<-read.table("FitnessClubData.dat", header = T)
cca1
